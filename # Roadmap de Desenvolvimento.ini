# Roadmap de Desenvolvimento - Task Manager App

## Visão Geral do Projeto

**Sistema de gerenciamento colaborativo de tarefas com:**
- React 18 + Vite + Tailwind CSS 3.3.5
- Supabase (Backend + Auth + Realtime)
- Deploy no GitHub Pages
- Estrutura modular com arquivos pequenos e especializados

---

## 🎯 ETAPA 1 - Setup Inicial e Configuração Base

### **Objetivo**
Configurar ambiente de desenvolvimento, dependências e arquivos de configuração base.

### **Resumo da Etapa Anterior**
*Primeira etapa - sem dependências anteriores*

### **Arquivos a Criar**
```
├── package.json (dependências principais)
├── vite.config.js (configuração Vite + aliases)
├── tailwind.config.js (configuração Tailwind)
├── postcss.config.js
├── .env.example
├── .gitignore
├── src/
│   ├── main.jsx (entry point)
│   ├── App.jsx (component raiz)
│   ├── index.css (imports Tailwind)
│   ├── config/
│   │   ├── supabase.js (configuração Supabase)
│   │   ├── environment.js (variáveis ambiente)
│   │   ├── constants.js (constantes globais)
│   │   └── routes.js (definição de rotas)
│   ├── utils/constants/
│   │   ├── taskStatus.js
│   │   ├── userRoles.js
│   │   ├── webhookEvents.js
│   │   ├── notificationTypes.js
│   │   └── index.js
│   └── styles/
│       ├── globals.css (estilos globais)
│       ├── components.css (classes componentes)
│       └── utilities.css (utilities customizadas)
```

### **Preparação para Próxima Etapa**
Base configurada para iniciar sistema de autenticação.

---

## 🔐 ETAPA 2 - Sistema de Autenticação

### **Objetivo**
Implementar autenticação completa com Supabase Auth.

### **Resumo da Etapa Anterior**
✅ Projeto configurado com Vite, Tailwind e Supabase
✅ Arquivos de configuração criados
✅ Constantes e utilitários base definidos

### **Arquivos a Criar**
```
├── src/
│   ├── services/
│   │   ├── api/
│   │   │   ├── supabase.js (cliente Supabase)
│   │   │   ├── client.js (configurações API)
│   │   │   └── index.js
│   │   └── auth/
│   │       ├── authService.js (operações auth)
│   │       ├── sessionService.js (gestão sessão)
│   │       └── index.js
│   ├── context/
│   │   ├── AuthContext.jsx (contexto autenticação)
│   │   └── index.js
│   ├── hooks/auth/
│   │   ├── useAuth.js (hook principal auth)
│   │   ├── useLogin.js (hook login)
│   │   ├── useRegister.js (hook registro)
│   │   └── index.js
│   ├── components/shared/ui/
│   │   ├── Button.jsx
│   │   ├── Input.jsx
│   │   ├── Card.jsx
│   │   ├── Spinner.jsx
│   │   └── index.js
│   ├── components/auth/
│   │   ├── LoginForm.jsx
│   │   ├── RegisterForm.jsx
│   │   ├── ForgotPasswordForm.jsx
│   │   ├── ProtectedRoute.jsx
│   │   └── index.js
│   ├── pages/auth/
│   │   ├── LoginPage.jsx
│   │   ├── RegisterPage.jsx
│   │   ├── ForgotPasswordPage.jsx
│   │   └── index.js
│   └── utils/validations/
│       ├── authValidations.js
│       └── index.js
```

### **Preparação para Próxima Etapa**
Sistema de auth funcionando, usuários podem se cadastrar/logar.

---

## 🎨 ETAPA 3 - Layout Base e Navegação

### **Objetivo**
Criar estrutura de layout, header, sidebar e sistema de navegação.

### **Resumo da Etapa Anterior**
✅ Autenticação implementada com Supabase
✅ Componentes base de UI criados
✅ Contexto de autenticação funcionando
✅ Validações de formulário implementadas

### **Arquivos a Criar**
```
├── src/
│   ├── components/shared/layout/
│   │   ├── Layout.jsx (layout principal)
│   │   ├── Header.jsx (header com busca/notif)
│   │   ├── Sidebar.jsx (navegação lateral)
│   │   ├── Footer.jsx
│   │   └── index.js
│   ├── components/shared/navigation/
│   │   ├── Breadcrumb.jsx
│   │   ├── NavTabs.jsx
│   │   ├── BackButton.jsx
│   │   └── index.js
│   ├── components/shared/ui/
│   │   ├── Modal.jsx
│   │   ├── Badge.jsx
│   │   ├── Dropdown.jsx
│   │   ├── Tooltip.jsx
│   │   ├── Avatar.jsx
│   │   └── Skeleton.jsx (adicionar aos existentes)
│   ├── hooks/shared/
│   │   ├── useModal.js
│   │   ├── useLocalStorage.js
│   │   ├── useDebounce.js
│   │   └── index.js
│   ├── pages/
│   │   ├── NotFoundPage.jsx
│   │   └── dashboard/
│   │       ├── DashboardPage.jsx (placeholder)
│   │       └── index.js
│   └── utils/helpers/
│       ├── dateFormatter.js
│       ├── stringUtils.js
│       ├── numberUtils.js
│       └── index.js
```

### **Preparação para Próxima Etapa**
Layout completo e navegação funcionando, pronto para implementar projetos.

---

## 📁 ETAPA 4 - Gestão de Projetos

### **Objetivo**
Implementar CRUD completo de projetos e relacionamento com usuários.

### **Resumo da Etapa Anterior**
✅ Layout base implementado com header/sidebar
✅ Sistema de navegação com breadcrumbs
✅ Componentes UI base expandidos
✅ Hooks utilitários criados

### **Arquivos a Criar**
```
├── src/
│   ├── services/projects/
│   │   ├── projectsService.js
│   │   ├── projectMembersService.js
│   │   └── index.js
│   ├── context/
│   │   ├── ProjectContext.jsx
│   │   └── index.js (atualizar)
│   ├── hooks/projects/
│   │   ├── useProjects.js
│   │   ├── useProject.js
│   │   ├── useProjectMembers.js
│   │   └── index.js
│   ├── components/projects/
│   │   ├── ProjectCard.jsx
│   │   ├── ProjectList.jsx
│   │   ├── CreateProjectModal.jsx
│   │   ├── ProjectHeader.jsx
│   │   ├── ProjectSettings.jsx
│   │   └── index.js
│   ├── components/shared/forms/
│   │   ├── FormField.jsx
│   │   ├── FormSelect.jsx
│   │   ├── FormTextarea.jsx
│   │   └── index.js
│   ├── pages/projects/
│   │   ├── ProjectsPage.jsx
│   │   ├── ProjectDetailPage.jsx
│   │   └── index.js
│   ├── utils/validations/
│   │   ├── projectValidations.js
│   │   └── index.js (atualizar)
│   └── types/
│       ├── project.js
│       ├── user.js
│       └── index.js
```

### **Preparação para Próxima Etapa**
Sistema de projetos funcionando, usuários podem criar e gerenciar projetos.

---

## 👥 ETAPA 5 - Gestão de Pessoas

### **Objetivo**
Implementar gestão de pessoas nos projetos com filtros e visualizações.

### **Resumo da Etapa Anterior**
✅ CRUD de projetos implementado
✅ Relacionamento projeto-usuário funcionando
✅ Context de projeto criado
✅ Validações de projeto implementadas

### **Arquivos a Criar**
```
├── src/
│   ├── services/people/
│   │   ├── peopleService.js
│   │   └── index.js
│   ├── hooks/people/
│   │   ├── usePeople.js
│   │   ├── usePerson.js
│   │   └── index.js
│   ├── components/people/
│   │   ├── PersonCard.jsx
│   │   ├── PersonList.jsx
│   │   ├── AddPersonModal.jsx
│   │   ├── PersonTasks.jsx
│   │   ├── PersonFilters.jsx
│   │   └── index.js
│   ├── components/shared/ui/
│   │   ├── ProgressBar.jsx
│   │   └── index.js (atualizar)
│   ├── pages/people/
│   │   ├── PeoplePage.jsx
│   │   ├── PersonDetailPage.jsx
│   │   └── index.js
│   └── utils/formatters/
│       ├── dateFormatters.js
│       ├── numberFormatters.js
│       ├── textFormatters.js
│       └── index.js
```

### **Preparação para Próxima Etapa**
Sistema de pessoas implementado, pronto para criar tarefas.

---

## ✅ ETAPA 6 - Gestão de Tarefas (Parte 1)

### **Objetivo**
Implementar CRUD básico de tarefas, etapas e atribuições.

### **Resumo da Etapa Anterior**
✅ Gestão de pessoas implementada
✅ Filtros e visualizações de pessoas funcionando
✅ Sistema de progresso implementado
✅ Formatadores de dados criados

### **Arquivos a Criar**
```
├── src/
│   ├── services/tasks/
│   │   ├── tasksService.js
│   │   ├── taskStepsService.js
│   │   ├── taskAssignmentsService.js
│   │   └── index.js
│   ├── context/
│   │   ├── TaskContext.jsx
│   │   └── index.js (atualizar)
│   ├── hooks/tasks/
│   │   ├── useTasks.js
│   │   ├── useTask.js
│   │   ├── useTaskSteps.js
│   │   └── index.js
│   ├── components/tasks/
│   │   ├── TaskCard.jsx
│   │   ├── TaskList.jsx
│   │   ├── TaskModal.jsx
│   │   ├── CreateTaskModal.jsx
│   │   ├── TaskSteps.jsx
│   │   ├── TaskStatusBadge.jsx
│   │   ├── TaskFilters.jsx
│   │   └── index.js
│   ├── pages/tasks/
│   │   ├── TasksPage.jsx
│   │   ├── TaskDetailPage.jsx
│   │   └── index.js
│   ├── utils/validations/
│   │   ├── taskValidations.js
│   │   └── index.js (atualizar)
│   └── types/
│       ├── task.js
│       └── index.js (atualizar)
```

### **Preparação para Próxima Etapa**
CRUD básico de tarefas funcionando, pronto para implementar dependências.

---

## 🔗 ETAPA 7 - Dependências e Visualização de Fluxo

### **Objetivo**
Implementar sistema de dependências entre tarefas e visualização em fluxograma.

### **Resumo da Etapa Anterior**
✅ CRUD de tarefas implementado
✅ Sistema de etapas funcionando
✅ Atribuições de tarefas implementadas
✅ Filtros de tarefas criados

### **Arquivos a Criar**
```
├── src/
│   ├── services/tasks/
│   │   ├── taskDependenciesService.js
│   │   └── index.js (atualizar)
│   ├── hooks/tasks/
│   │   ├── useTaskDependencies.js
│   │   └── index.js (atualizar)
│   ├── components/tasks/
│   │   ├── DependencyFlow.jsx
│   │   ├── DependencySelector.jsx
│   │   ├── FlowChart.jsx
│   │   └── index.js (atualizar)
│   ├── components/shared/ui/
│   │   ├── FlowNode.jsx
│   │   ├── FlowEdge.jsx
│   │   └── index.js (atualizar)
│   └── utils/helpers/
│       ├── flowUtils.js
│       ├── dependencyValidator.js
│       └── index.js (atualizar)
```

### **Preparação para Próxima Etapa**
Sistema de dependências funcionando, pronto para implementar comentários.

---

## 💬 ETAPA 8 - Sistema de Comentários e Atividades

### **Objetivo**
Implementar comentários aninhados e log de atividades.

### **Resumo da Etapa Anterior**
✅ Sistema de dependências implementado
✅ Visualização em fluxograma funcionando
✅ Validação de dependências circulares
✅ Interface de seleção de dependências

### **Arquivos a Criar**
```
├── src/
│   ├── services/
│   │   ├── comments/
│   │   │   ├── commentsService.js
│   │   │   └── index.js
│   │   └── dashboard/
│   │       ├── activityService.js
│   │       └── index.js
│   ├── hooks/tasks/
│   │   ├── useTaskComments.js
│   │   └── index.js (atualizar)
│   ├── hooks/dashboard/
│   │   ├── useActivityLog.js
│   │   └── index.js
│   ├── components/comments/
│   │   ├── CommentsList.jsx
│   │   ├── CommentItem.jsx
│   │   ├── CommentForm.jsx
│   │   ├── CommentThread.jsx
│   │   └── index.js
│   ├── components/tasks/
│   │   ├── TaskComments.jsx
│   │   ├── TaskHistory.jsx
│   │   └── index.js (atualizar)
│   └── components/dashboard/
│       ├── ActivityTimeline.jsx
│       └── index.js
```

### **Preparação para Próxima Etapa**
Sistema de comentários e atividades funcionando, pronto para notificações.

---

## 🔔 ETAPA 9 - Sistema de Notificações

### **Objetivo**
Implementar notificações em tempo real e centro de notificações.

### **Resumo da Etapa Anterior**
✅ Sistema de comentários aninhados implementado
✅ Log de atividades funcionando
✅ Timeline de atividades criada
✅ Histórico de tarefas implementado

### **Arquivos a Criar**
```
├── src/
│   ├── services/notifications/
│   │   ├── notificationsService.js
│   │   ├── realtimeService.js
│   │   └── index.js
│   ├── context/
│   │   ├── NotificationContext.jsx
│   │   └── index.js (atualizar)
│   ├── hooks/notifications/
│   │   ├── useNotifications.js
│   │   ├── useRealtime.js
│   │   └── index.js
│   ├── components/shared/notifications/
│   │   ├── NotificationCenter.jsx
│   │   ├── NotificationDropdown.jsx
│   │   ├── NotificationItem.jsx
│   │   ├── NotificationBadge.jsx
│   │   └── index.js
│   ├── components/shared/ui/
│   │   ├── Toast.jsx
│   │   └── index.js (atualizar)
│   ├── hooks/shared/
│   │   ├── useToast.js
│   │   └── index.js (atualizar)
│   ├── pages/notifications/
│   │   ├── NotificationsPage.jsx
│   │   └── index.js
│   └── types/
│       ├── notification.js
│       └── index.js (atualizar)
```

### **Preparação para Próxima Etapa**
Notificações em tempo real funcionando, pronto para dashboard pessoal.

---

## 📊 ETAPA 10 - Dashboard Pessoal e Métricas

### **Objetivo**
Implementar dashboard com métricas pessoais e visualizações.

### **Resumo da Etapa Anterior**
✅ Sistema de notificações implementado
✅ Notificações em tempo real funcionando
✅ Centro de notificações criado
✅ Sistema de toast implementado

### **Arquivos a Criar**
```
├── src/
│   ├── services/dashboard/
│   │   ├── metricsService.js
│   │   └── index.js (atualizar)
│   ├── hooks/dashboard/
│   │   ├── useMetrics.js
│   │   └── index.js (atualizar)
│   ├── components/dashboard/
│   │   ├── PersonalDashboard.jsx
│   │   ├── MetricCard.jsx
│   │   ├── ProgressChart.jsx
│   │   ├── ProjectProgressCards.jsx
│   │   └── index.js
│   ├── components/shared/ui/
│   │   ├── Chart.jsx
│   │   ├── StatCard.jsx
│   │   └── index.js (atualizar)
│   └── utils/helpers/
│       ├── chartUtils.js
│       ├── colorUtils.js
│       └── index.js (atualizar)
```

### **Preparação para Próxima Etapa**
Dashboard pessoal funcionando, pronto para busca global.

---

## 🔍 ETAPA 11 - Busca Global Avançada

### **Objetivo**
Implementar sistema de busca global com resultados categorizados.

### **Resumo da Etapa Anterior**
✅ Dashboard pessoal implementado
✅ Métricas e gráficos funcionando
✅ Cards de progresso criados
✅ Visualizações de dados implementadas

### **Arquivos a Criar**
```
├── src/
│   ├── hooks/shared/
│   │   ├── useSearch.js
│   │   └── index.js (atualizar)
│   ├── components/shared/search/
│   │   ├── SearchGlobal.jsx
│   │   ├── SearchResults.jsx
│   │   ├── SearchModal.jsx
│   │   ├── ResultCard.jsx
│   │   └── index.js
│   └── utils/helpers/
│       ├── searchUtils.js
│       ├── highlightUtils.js
│       └── index.js (atualizar)
```

### **Preparação para Próxima Etapa**
Busca global funcionando, pronto para drag & drop.

---

## 🎯 ETAPA 12 - Sistema Drag & Drop Avançado

### **Objetivo**
Implementar drag & drop com validações e feedback visual.

### **Resumo da Etapa Anterior**
✅ Busca global implementada
✅ Resultados categorizados funcionando
✅ Modal de busca criado
✅ Sistema de highlight implementado

### **Arquivos a Criar**
```
├── src/
│   ├── hooks/shared/
│   │   ├── useDragDrop.js
│   │   └── index.js (atualizar)
│   ├── components/tasks/
│   │   ├── DragDropArea.jsx
│   │   ├── DragPreview.jsx
│   │   ├── DropZone.jsx
│   │   └── index.js (atualizar)
│   ├── utils/helpers/
│   │   ├── dragDropUtils.js
│   │   ├── validationUtils.js
│   │   └── index.js (atualizar)
│   └── styles/
│       ├── animations.css
│       └── index.css (atualizar)
```

### **Preparação para Próxima Etapa**
Drag & drop funcionando, pronto para exportação.

---

## 📤 ETAPA 13 - Sistema de Exportação

### **Objetivo**
Implementar exportação de dados em PDF e CSV.

### **Resumo da Etapa Anterior**
✅ Drag & drop implementado
✅ Validações de movimento funcionando
✅ Feedback visual criado
✅ Animações implementadas

### **Arquivos a Criar**
```
├── src/
│   ├── services/export/
│   │   ├── pdfExportService.js
│   │   ├── csvExportService.js
│   │   └── index.js
│   ├── hooks/shared/
│   │   ├── useExport.js
│   │   └── index.js (atualizar)
│   ├── components/shared/export/
│   │   ├── ExportButtons.jsx
│   │   ├── PDFExport.jsx
│   │   ├── CSVExport.jsx
│   │   ├── ExportModal.jsx
│   │   └── index.js
│   └── utils/helpers/
│       ├── exportUtils.js
│       └── index.js (atualizar)
```

### **Preparação para Próxima Etapa**
Sistema de exportação funcionando, pronto para webhooks.

---

## 🔗 ETAPA 14 - Sistema de Webhooks

### **Objetivo**
Implementar configuração e gestão de webhooks para integrações.

### **Resumo da Etapa Anterior**
✅ Exportação PDF/CSV implementada
✅ Modais de exportação criados
✅ Configurações de exportação funcionando
✅ Utilitários de exportação implementados

### **Arquivos a Criar**
```
├── src/
│   ├── services/webhooks/
│   │   ├── webhooksService.js
│   │   ├── webhookDispatcher.js
│   │   └── index.js
│   ├── hooks/webhooks/
│   │   ├── useWebhooks.js
│   │   ├── useWebhook.js
│   │   └── index.js
│   ├── components/webhooks/
│   │   ├── WebhookConfig.jsx
│   │   ├── WebhookCard.jsx
│   │   ├── WebhookModal.jsx
│   │   ├── WebhookList.jsx
│   │   ├── EventSelector.jsx
│   │   └── index.js
│   ├── pages/settings/
│   │   ├── SettingsPage.jsx
│   │   ├── ProfilePage.jsx
│   │   ├── WebhooksPage.jsx
│   │   └── index.js
│   ├── utils/validations/
│   │   ├── webhookValidations.js
│   │   └── index.js (atualizar)
│   └── types/
│       ├── webhook.js
│       └── index.js (atualizar)
```

### **Preparação para Próxima Etapa**
Sistema de webhooks funcionando, pronto para finalização.

---

## ✨ ETAPA 15 - Polimentos e Finalização

### **Objetivo**
Finalizar detalhes, otimizações e preparar para deploy.

### **Resumo da Etapa Anterior**
✅ Sistema de webhooks implementado
✅ Configurações de webhook funcionando
✅ Páginas de configurações criadas
✅ Validações de webhook implementadas

### **Arquivos a Criar/Refinar**
```
├── .github/workflows/
│   └── deploy.yml (GitHub Actions)
├── src/
│   ├── components/shared/forms/
│   │   ├── FormCheckbox.jsx
│   │   ├── FormRadio.jsx
│   │   └── index.js (completar)
│   ├── utils/permissions/
│   │   ├── projectPermissions.js
│   │   ├── taskPermissions.js
│   │   └── index.js
│   ├── components/shared/layout/
│   │   └── ErrorBoundary.jsx
│   └── utils/helpers/
│       ├── performanceUtils.js
│       └── index.js (finalizar)
├── README.md (documentação)
├── CHANGELOG.md
└── public/
    ├── manifest.json (PWA)
    └── sw.js (Service Worker)
```

### **Resultado Final**
✅ Aplicação completa e otimizada
✅ Deploy automatizado configurado
✅ Documentação criada
✅ PWA implementado

---

## 📋 Diretrizes para Cada Etapa

### **Padrões de Código**
- **Componentes**: Máximo 100 linhas, dividir se necessário
- **Hooks**: Uma responsabilidade por hook
- **Serviços**: Métodos pequenos e específicos
- **Validações**: Separadas por domínio

### **Estrutura de Arquivos**
- **index.js**: Sempre presente para exports limpos
- **Nomenclatura**: Consistente (PascalCase para componentes)
- **Imports**: Usar aliases configurados (@/components, etc.)

### **Continuidade entre Etapas**
Cada nova conversa deve começar com:
1. ✅ **Resumo do que foi construído**
2. 🎯 **Objetivo da etapa atual**
3. 📁 **Arquivos a serem criados**
4. 🔄 **Dependências da etapa anterior**

### **Refatoração Contínua**
- Se arquivo ficar > 150 linhas → dividir
- Criar arquivo orquestrador se necessário
- Manter responsabilidades bem definidas