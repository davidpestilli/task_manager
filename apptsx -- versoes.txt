//app.tsx at√© a etapa 4

import React from 'react'
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'
import { Toaster } from 'react-hot-toast'

// Importa√ß√µes de contexto e autentica√ß√£o
import { AuthProvider } from '@/context/AuthContext'
import { ProtectedRoute } from '@/components/auth'
import { LoginPage, RegisterPage, ForgotPasswordPage } from '@/pages/auth'
import { FullPageSpinner } from '@/components/shared/ui'
import { useAuth } from '@/hooks/auth'

// Importa√ß√µes de configura√ß√£o
import { ROUTES } from '@config/routes'
import { APP_CONFIG } from '@config/constants'

// CSS customizado
import './app.css'

// Placeholder components for future implementation
const DashboardPage = () => {
  const { user, logout } = useAuth()
  
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="text-center p-8 bg-white rounded-xl shadow-lg max-w-md mx-4">
        <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full mx-auto mb-6 flex items-center justify-center">
          <svg 
            className="w-8 h-8 text-white" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" 
            />
          </svg>
        </div>
        
        <h1 className="text-2xl font-bold text-gray-900 mb-2">Dashboard</h1>
        <p className="text-gray-600 mb-4">Bem-vindo ao {APP_CONFIG.name}!</p>
        
        {user && (
          <div className="mb-6 p-4 bg-blue-50 rounded-lg">
            <p className="text-sm text-blue-700">
              <strong>Usu√°rio:</strong> {user.fullName}
            </p>
            <p className="text-sm text-blue-600">
              {user.email}
            </p>
          </div>
        )}
        
        <div className="text-sm text-gray-500 mb-6">
          <p>üöÄ Etapa 2 - Sistema de Autentica√ß√£o Conclu√≠do!</p>
          <p className="mt-2">
            <strong>Pr√≥xima Etapa:</strong> Layout Base e Navega√ß√£o
          </p>
        </div>

        <button
          onClick={logout}
          className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors"
        >
          Sair
        </button>
      </div>
    </div>
  )
}

const NotFoundPage = () => (
  <div className="min-h-screen flex items-center justify-center bg-gray-50">
    <div className="text-center p-8 bg-white rounded-xl shadow-lg max-w-md mx-4">
      <h1 className="text-4xl font-bold text-gray-900 mb-4">404</h1>
      <p className="text-gray-600 mb-4">P√°gina n√£o encontrada</p>
      <a 
        href="/" 
        className="text-blue-600 hover:text-blue-500 font-medium"
      >
        Voltar ao in√≠cio
      </a>
    </div>
  </div>
)

/**
 * Componente raiz da aplica√ß√£o Task Manager
 * 
 * Responsabilidades:
 * - Configura√ß√£o do roteamento
 * - Configura√ß√£o de notifica√ß√µes globais
 * - Wrapper dos providers de contexto
 * - Sistema de autentica√ß√£o
 * - Prote√ß√£o de rotas
 */
function App() {
  return (
    <AuthProvider>
      <Router basename={import.meta.env.VITE_BASE_URL || '/'}>
        <div className="App min-h-screen bg-gray-50">
          {/* √Årea principal da aplica√ß√£o */}
          <main className="min-h-screen">
            <Routes>
              {/* Rota raiz - redireciona baseado na autentica√ß√£o */}
              <Route 
                path="/" 
                element={<RootRedirect />} 
              />

              {/* Rotas de autentica√ß√£o (p√∫blicas) */}
              <Route 
                path="/auth/login" 
                element={
                  <ProtectedRoute requireAuth={false}>
                    <LoginPage />
                  </ProtectedRoute>
                } 
              />
              
              <Route 
                path="/auth/register" 
                element={
                  <ProtectedRoute requireAuth={false}>
                    <RegisterPage />
                  </ProtectedRoute>
                } 
              />
              
              <Route 
                path="/auth/forgot-password" 
                element={
                  <ProtectedRoute requireAuth={false}>
                    <ForgotPasswordPage />
                  </ProtectedRoute>
                } 
              />

              {/* Rotas protegidas */}
              <Route 
                path="/dashboard" 
                element={
                  <ProtectedRoute>
                    <DashboardPage />
                  </ProtectedRoute>
                } 
              />

              {/* Rota 404 */}
              <Route path="*" element={<NotFoundPage />} />
            </Routes>
          </main>

          {/* Sistema de notifica√ß√µes toast */}
          <Toaster
            position="top-right"
            toastOptions={{
              duration: parseInt(import.meta.env.VITE_NOTIFICATION_DURATION) || 5000,
              style: {
                background: '#fff',
                color: '#374151',
                border: '1px solid #e5e7eb',
                borderRadius: '0.5rem',
                boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'
              },
              success: {
                iconTheme: {
                  primary: '#10b981',
                  secondary: '#fff'
                }
              },
              error: {
                iconTheme: {
                  primary: '#ef4444',
                  secondary: '#fff'
                }
              }
            }}
          />
        </div>
      </Router>
    </AuthProvider>
  )
}

/**
 * Componente para redirecionar rota raiz baseado na autentica√ß√£o
 */
const RootRedirect = () => {
  const { isAuthenticated, isLoading } = useAuth()

  if (isLoading) {
    return <FullPageSpinner text="Verificando autentica√ß√£o..." />
  }

  return (
    <Navigate 
      to={isAuthenticated ? '/dashboard' : '/auth/login'} 
      replace 
    />
  )
}

export default App




//app.tsx depois do merge com a etapa 4





import React from 'react'
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'
import { Toaster } from 'react-hot-toast'

// Importa√ß√µes de contexto e autentica√ß√£o
import { AuthProvider, ProjectProvider } from '@/context'
import { ProtectedRoute } from '@/components/auth'
import { LoginPage, RegisterPage, ForgotPasswordPage } from '@/pages/auth'
import { ProjectsPage, ProjectDetailPage } from '@/pages/projects'
import { FullPageSpinner } from '@/components/shared/ui'
import { useAuth } from '@/hooks/auth'

// Importa√ß√µes de configura√ß√£o
import { ROUTES } from '@config/routes'
import { APP_CONFIG } from '@config/constants'

// CSS customizado
import './app.css'

// Componente de p√°gina n√£o encontrada
const NotFoundPage = () => (
  <div className="min-h-screen flex items-center justify-center bg-gray-50">
    <div className="text-center p-8 bg-white rounded-xl shadow-lg max-w-md mx-4">
      <h1 className="text-4xl font-bold text-gray-900 mb-4">404</h1>
      <p className="text-gray-600 mb-4">P√°gina n√£o encontrada</p>
      <a 
        href="/" 
        className="text-blue-600 hover:text-blue-500 font-medium"
      >
        Voltar ao in√≠cio
      </a>
    </div>
  </div>
)

/**
 * Componente raiz da aplica√ß√£o Task Manager
 * 
 * Responsabilidades:
 * - Configura√ß√£o do roteamento
 * - Configura√ß√£o de notifica√ß√µes globais
 * - Wrapper dos providers de contexto
 * - Sistema de autentica√ß√£o
 * - Prote√ß√£o de rotas
 */
function App() {
  return (
    <AuthProvider>
      <ProjectProvider>
        <Router basename={import.meta.env.VITE_BASE_URL || '/'}>
          <div className="App min-h-screen bg-gray-50">
            {/* √Årea principal da aplica√ß√£o */}
            <main className="min-h-screen">
              <Routes>
                {/* Rota raiz - redireciona baseado na autentica√ß√£o */}
                <Route 
                  path="/" 
                  element={<RootRedirect />} 
                />

                {/* Rotas de autentica√ß√£o (p√∫blicas) */}
                <Route 
                  path="/auth/login" 
                  element={
                    <ProtectedRoute requireAuth={false}>
                      <LoginPage />
                    </ProtectedRoute>
                  } 
                />
                
                <Route 
                  path="/auth/register" 
                  element={
                    <ProtectedRoute requireAuth={false}>
                      <RegisterPage />
                    </ProtectedRoute>
                  } 
                />
                
                <Route 
                  path="/auth/forgot-password" 
                  element={
                    <ProtectedRoute requireAuth={false}>
                      <ForgotPasswordPage />
                    </ProtectedRoute>
                  } 
                />

                {/* Rotas protegidas - Projetos */}
                <Route 
                  path="/projects" 
                  element={
                    <ProtectedRoute>
                      <ProjectsPage />
                    </ProtectedRoute>
                  } 
                />
                
                <Route 
                  path="/projects/:projectId/people" 
                  element={
                    <ProtectedRoute>
                      <ProjectDetailPage />
                    </ProtectedRoute>
                  } 
                />
                
                <Route 
                  path="/projects/:projectId/tasks" 
                  element={
                    <ProtectedRoute>
                      <ProjectDetailPage />
                    </ProtectedRoute>
                  } 
                />

                {/* Rota 404 */}
                <Route path="*" element={<NotFoundPage />} />
              </Routes>
            </main>

            {/* Sistema de notifica√ß√µes toast */}
            <Toaster
              position="top-right"
              toastOptions={{
                duration: parseInt(import.meta.env.VITE_NOTIFICATION_DURATION) || 5000,
                style: {
                  background: '#fff',
                  color: '#374151',
                  border: '1px solid #e5e7eb',
                  borderRadius: '0.5rem',
                  boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'
                },
                success: {
                  iconTheme: {
                    primary: '#10b981',
                    secondary: '#fff'
                  }
                },
                error: {
                  iconTheme: {
                    primary: '#ef4444',
                    secondary: '#fff'
                  }
                }
              }}
            />
          </div>
        </Router>
      </ProjectProvider>
    </AuthProvider>
  )
}

/**
 * Componente para redirecionar rota raiz baseado na autentica√ß√£o
 */
const RootRedirect = () => {
  const { isAuthenticated, isLoading } = useAuth()

  if (isLoading) {
    return <FullPageSpinner text="Verificando autentica√ß√£o..." />
  }

  return (
    <Navigate 
      to={isAuthenticated ? '/projects' : '/auth/login'} 
      replace 
    />
  )
}

export default App


//depois do merger com a etapa 5

import React from 'react'
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'
import { Toaster } from 'react-hot-toast'

// Importa√ß√µes de contexto e autentica√ß√£o
import { AuthProvider, ProjectProvider } from '@/context'
import { ProtectedRoute } from '@/components/auth'
import { LoginPage, RegisterPage, ForgotPasswordPage } from '@/pages/auth'
import { ProjectsPage, ProjectDetailPage } from '@/pages/projects'
import { PeoplePage, PersonDetailPage } from '@/pages/people'
import { FullPageSpinner } from '@/components/shared/ui'
import { useAuth } from '@/hooks/auth'

// CSS customizado
import './app.css'

// Componente de p√°gina n√£o encontrada
const NotFoundPage = () => (
  <div className="min-h-screen flex items-center justify-center bg-gray-50">
    <div className="text-center p-8 bg-white rounded-xl shadow-lg max-w-md mx-4">
      <h1 className="text-4xl font-bold text-gray-900 mb-4">404</h1>
      <p className="text-gray-600 mb-4">P√°gina n√£o encontrada</p>
      <a 
        href="/" 
        className="text-blue-600 hover:text-blue-500 font-medium"
      >
        Voltar ao in√≠cio
      </a>
    </div>
  </div>
)

/**
 * Componente raiz da aplica√ß√£o Task Manager
 * 
 * Responsabilidades:
 * - Configura√ß√£o do roteamento
 * - Configura√ß√£o de notifica√ß√µes globais
 * - Wrapper dos providers de contexto
 * - Sistema de autentica√ß√£o
 * - Prote√ß√£o de rotas
 */
function App() {
  return (
    <AuthProvider>
      <ProjectProvider>
        <Router basename={import.meta.env.VITE_BASE_URL || '/'}>
          <div className="App min-h-screen bg-gray-50">
            {/* √Årea principal da aplica√ß√£o */}
            <main className="min-h-screen">
              <Routes>
                {/* Rota raiz - redireciona baseado na autentica√ß√£o */}
                <Route 
                  path="/" 
                  element={<RootRedirect />} 
                />

                {/* Rotas de autentica√ß√£o (p√∫blicas) */}
                <Route 
                  path="/auth/login" 
                  element={
                    <ProtectedRoute requireAuth={false}>
                      <LoginPage />
                    </ProtectedRoute>
                  } 
                />
                
                <Route 
                  path="/auth/register" 
                  element={
                    <ProtectedRoute requireAuth={false}>
                      <RegisterPage />
                    </ProtectedRoute>
                  } 
                />
                
                <Route 
                  path="/auth/forgot-password" 
                  element={
                    <ProtectedRoute requireAuth={false}>
                      <ForgotPasswordPage />
                    </ProtectedRoute>
                  } 
                />

                {/* Rotas protegidas - Projetos */}
                <Route 
                  path="/projects" 
                  element={
                    <ProtectedRoute>
                      <ProjectsPage />
                    </ProtectedRoute>
                  } 
                />
                
                {/* Rotas protegidas - Pessoas */}
                <Route 
                  path="/projects/:projectId/people" 
                  element={
                    <ProtectedRoute>
                      <PeoplePage />
                    </ProtectedRoute>
                  } 
                />
                
                <Route 
                  path="/projects/:projectId/people/:personId" 
                  element={
                    <ProtectedRoute>
                      <PersonDetailPage />
                    </ProtectedRoute>
                  } 
                />
                
                {/* Rotas protegidas - Tarefas (para pr√≥xima etapa) */}
                <Route 
                  path="/projects/:projectId/tasks" 
                  element={
                    <ProtectedRoute>
                      <ProjectDetailPage />
                    </ProtectedRoute>
                  } 
                />

                {/* Rota 404 */}
                <Route path="*" element={<NotFoundPage />} />
              </Routes>
            </main>

            {/* Sistema de notifica√ß√µes toast */}
            <Toaster
              position="top-right"
              toastOptions={{
                duration: parseInt(import.meta.env.VITE_NOTIFICATION_DURATION) || 5000,
                style: {
                  background: '#fff',
                  color: '#374151',
                  border: '1px solid #e5e7eb',
                  borderRadius: '0.5rem',
                  boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'
                },
                success: {
                  iconTheme: {
                    primary: '#10b981',
                    secondary: '#fff'
                  }
                },
                error: {
                  iconTheme: {
                    primary: '#ef4444',
                    secondary: '#fff'
                  }
                }
              }}
            />
          </div>
        </Router>
      </ProjectProvider>
    </AuthProvider>
  )
}

/**
 * Componente para redirecionar rota raiz baseado na autentica√ß√£o
 */
const RootRedirect = () => {
  const { isAuthenticated, isLoading } = useAuth()

  if (isLoading) {
    return <FullPageSpinner text="Verificando autentica√ß√£o..." />
  }

  return (
    <Navigate 
      to={isAuthenticated ? '/projects' : '/auth/login'} 
      replace 
    />
  )
}

export default App